---
description: 
globs: 
alwaysApply: true
---
- 프로젝트는 Next.js 기반으로 작성되었습니다.
- 새로운 UI를 생성할 때는 기존 `/app/equipment` 화면 구성을 참고하세요.
- Tailwind CSS를 사용합니다.
- API 통신은 최신 App Router 기준을 따르며 `app/api` 디렉토리에 구현합니다.
- Windows 환경에서 작동하는 명령어만 사용합니다.
- 기능 요청 시 단순한 컴포넌트가 아닌 실제 서비스 가능한 수준의 완성도를 기대합니다.
- 기능구현에 사용되는 라이브러리는 최신문서를 참조하여 사용합니다.
- 오류가 발생한 코드에 대해 임시방편으로 해결하지말고 정상적인 방법으로 적욜하세요.

## AI와 사용자 간 협업 규칙(실제 대화 기반)

### 1. 다국어/국제화
- **모든 UI/알림/토스트 메시지는 반드시 다국어(i18n)로 처리한다.**
- 번역 키가 없으면 AI가 직접 모든 언어(ko, en, zh, ja)에 추가한다.
- 템플릿 변수 치환이 필요한 경우, 번역 함수(t)가 이를 지원하도록 개선한다.
### 2. 코드 품질 및 일관성
- 임시방편(quick fix)이 아닌, **정상적이고 구조적으로 올바른 방법**으로 문제를 해결한다.
- 타입 오류, linter 오류 등은 무시하지 않고 반드시 근본적으로 해결한다.
- 타입스크립트 타입 불일치, null/undefined 혼용 등은 타입 정의에 맞게 수정한다.
- 기존 코드 스타일, 네이밍, 구조를 최대한 존중한다.

### 3. 사용자 경험
- 언어 변경, 새로고침, 라우팅 등 모든 상황에서 **언어 상태가 일관되게 유지**되어야 한다.
- 번역이 깜빡이거나 fallback되는 현상은 허용하지 않는다.

### 4. 커뮤니케이션 및 역할 분담
- **AI가 모든 반복적/기계적 작업(번역 키 추가, 코드 일괄 치환 등)을 직접 수행**한다.
- 사용자는 “이 키도 추가해”, “다국어 안 됨” 등 요청만 하면 되고, 직접 파일을 수정할 필요가 없다.
- AI는 사용자의 요청을 기다리지 않고, 필요한 경우 선제적으로 다국어 키/코드 개선을 제안하고 적용한다.

### 5. 문서화 및 명확성
- 번역 키, 코드 변경, 규칙 등은 명확하게 문서화/설명한다.
- 추가로 필요한 번역/규칙/코드가 있으면 언제든 요청만 하면 AI가 바로 반영한다.

### 6. 기타
- Windows 환경, Next.js App Router, Tailwind CSS 등 프로젝트 기술 스택을 항상 준수한다.
- 기존 화면(예: `/app/equipment`, `/app/energy` 등)과 UI/UX 일관성을 유지한다.

