"use client"

import type React from "react"
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "light" | "dark" | "system"
type ColorTheme = "blue" | "green" | "purple" | "orange" | "red"

interface ThemeContextType {
  theme: Theme
  colorTheme: ColorTheme
  setTheme: (theme: Theme) => void
  setColorTheme: (colorTheme: ColorTheme) => void
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>("system")
  const [colorTheme, setColorTheme] = useState<ColorTheme>("blue")

  useEffect(() => {
    const savedTheme = localStorage.getItem("fms-theme") as Theme
    const savedColorTheme = localStorage.getItem("fms-color-theme") as ColorTheme

    if (savedTheme) setTheme(savedTheme)
    if (savedColorTheme) setColorTheme(savedColorTheme)
  }, [])

  useEffect(() => {
    const root = window.document.documentElement

    // 다크모드 적용
    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
      root.classList.add(systemTheme)
    } else {
      root.classList.add(theme)
    }

    // 색상 테마 적용
    root.classList.remove("theme-blue", "theme-green", "theme-purple", "theme-orange", "theme-red")
    root.classList.add(`theme-${colorTheme}`)

    localStorage.setItem("fms-theme", theme)
    localStorage.setItem("fms-color-theme", colorTheme)
  }, [theme, colorTheme])

  return (
    <ThemeContext.Provider value={{ theme, colorTheme, setTheme, setColorTheme }}>{children}</ThemeContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeContext)
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider")
  }
  return context
}
