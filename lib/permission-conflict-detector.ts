import type { Role } from "@/types/permission"

export interface ConflictRule {
  id: string
  name: string
  description: string
  severity: "warning" | "error" | "critical"
  check: (roles: Role[]) => boolean
  suggestion?: string
}

export interface ConflictResult {
  hasConflicts: boolean
  conflicts: {
    rule: ConflictRule
    conflictingRoles: Role[]
  }[]
}

// Í∂åÌïú Ï∂©Îèå Í∑úÏπô Ï†ïÏùò
export const conflictRules: ConflictRule[] = [
  {
    id: "multiple-admin-levels",
    name: "Îã§Ï§ë Í¥ÄÎ¶¨Ïûê Î†àÎ≤® Ï∂©Îèå",
    description: "ÏÑúÎ°ú Îã§Î•∏ Î†àÎ≤®Ïùò Í¥ÄÎ¶¨Ïûê Ïó≠Ìï†ÏùÑ ÎèôÏãúÏóê Í∞ÄÏßà Ïàò ÏóÜÏäµÎãàÎã§",
    severity: "error",
    check: (roles: Role[]) => {
      const adminRoles = roles.filter((role) => role.level <= 2)
      const levels = new Set(adminRoles.map((role) => role.level))
      return levels.size > 1
    },
    suggestion: "ÌïòÎÇòÏùò Í¥ÄÎ¶¨Ïûê Î†àÎ≤®Îßå ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
  },
  {
    id: "admin-operator-conflict",
    name: "Í¥ÄÎ¶¨Ïûê-ÏûëÏóÖÏûê Ïó≠Ìï† Ï∂©Îèå",
    description: "Í¥ÄÎ¶¨Ïûê Ïó≠Ìï†Í≥º ÏùºÎ∞ò ÏûëÏóÖÏûê Ïó≠Ìï†ÏùÑ ÎèôÏãúÏóê Í∞ÄÏßà Ïàò ÏóÜÏäµÎãàÎã§",
    severity: "warning",
    check: (roles: Role[]) => {
      const hasAdmin = roles.some((role) => role.level <= 2)
      const hasOperator = roles.some((role) => role.level >= 4)
      return hasAdmin && hasOperator
    },
    suggestion: "Í¥ÄÎ¶¨Ïûê Ïó≠Ìï† ÎòêÎäî ÏûëÏóÖÏûê Ïó≠Ìï† Ï§ë ÌïòÎÇòÎßå ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
  },
  {
    id: "system-admin-with-others",
    name: "ÏãúÏä§ÌÖú Í¥ÄÎ¶¨Ïûê Îã®ÎèÖ Ïó≠Ìï†",
    description: "ÏãúÏä§ÌÖú Í¥ÄÎ¶¨ÏûêÎäî Îã§Î•∏ Ïó≠Ìï†Í≥º Ìï®Íªò Ìï†ÎãπÌï† Ïàò ÏóÜÏäµÎãàÎã§",
    severity: "critical",
    check: (roles: Role[]) => {
      const hasSystemAdmin = roles.some((role) => role.level === 1)
      return hasSystemAdmin && roles.length > 1
    },
    suggestion: "ÏãúÏä§ÌÖú Í¥ÄÎ¶¨Ïûê Ïó≠Ìï†Îßå Ìï†ÎãπÌïòÏÑ∏Ïöî",
  },
  {
    id: "conflicting-permissions",
    name: "ÏÉÅÏ∂© Í∂åÌïú Í∞êÏßÄ",
    description: "ÏùΩÍ∏∞ Ï†ÑÏö© Í∂åÌïúÍ≥º ÏàòÏ†ï Í∂åÌïúÏù¥ Ï∂©ÎèåÌï©ÎãàÎã§",
    severity: "warning",
    check: (roles: Role[]) => {
      const allPermissions = roles.flatMap((role) => role.permissions)
      const hasReadOnly = allPermissions.some((perm) => perm.includes("READ"))
      const hasWriteAll = allPermissions.some((perm) => perm.includes("ALL"))
      return hasReadOnly && hasWriteAll && roles.length > 1
    },
    suggestion: "Í∂åÌïú Î≤îÏúÑÎ•º Î™ÖÌôïÌûà Íµ¨Î∂ÑÌïòÏÑ∏Ïöî",
  },
  {
    id: "inspector-admin-conflict",
    name: "Ï†êÍ≤ÄÏûê-Í¥ÄÎ¶¨Ïûê Î∂ÑÎ¶¨ ÏõêÏπô",
    description: "Ï†êÍ≤ÄÏûêÎäî Í¥ÄÎ¶¨Ïûê Ïó≠Ìï†Í≥º Î∂ÑÎ¶¨ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§ (Í∞êÏÇ¨ ÎèÖÎ¶ΩÏÑ±)",
    severity: "warning",
    check: (roles: Role[]) => {
      const hasInspector = roles.some((role) => role.name === "INSPECTOR")
      const hasAdmin = roles.some((role) => role.level <= 2)
      return hasInspector && hasAdmin
    },
    suggestion: "Í∞êÏÇ¨ ÎèÖÎ¶ΩÏÑ±ÏùÑ ÏúÑÌï¥ Ï†êÍ≤ÄÏûêÏôÄ Í¥ÄÎ¶¨Ïûê Ïó≠Ìï†ÏùÑ Î∂ÑÎ¶¨ÌïòÏÑ∏Ïöî",
  },
]

export function detectConflicts(selectedRoles: string[], allRoles: Role[]): ConflictResult {
  const roles = allRoles.filter((role) => selectedRoles.includes(role.id))
  const conflicts: ConflictResult["conflicts"] = []

  for (const rule of conflictRules) {
    if (rule.check(roles)) {
      conflicts.push({
        rule,
        conflictingRoles: roles,
      })
    }
  }

  return {
    hasConflicts: conflicts.length > 0,
    conflicts,
  }
}

export function getConflictSeverityColor(severity: ConflictRule["severity"]): string {
  switch (severity) {
    case "critical":
      return "text-red-600 bg-red-50 border-red-200"
    case "error":
      return "text-red-500 bg-red-50 border-red-200"
    case "warning":
      return "text-amber-600 bg-amber-50 border-amber-200"
    default:
      return "text-gray-600 bg-gray-50 border-gray-200"
  }
}

export function getConflictIcon(severity: ConflictRule["severity"]): string {
  switch (severity) {
    case "critical":
      return "üö®"
    case "error":
      return "‚ùå"
    case "warning":
      return "‚ö†Ô∏è"
    default:
      return "‚ÑπÔ∏è"
  }
}
